{"version":3,"sources":["pages/redux-hooks/store.js","pages/redux-hooks/counter.jsx","pages/redux-hooks/index.jsx"],"names":["defaultState","count","store","createStore","state","action","type","value","Counter","useSelector","dispatch","useDispatch","shape","icon","onClick","ReduxHooks","className","language","showLineNumbers","style","tomorrowNight"],"mappings":"uLAmBA,IAAMA,EAAe,CACnBC,MAAO,GAkBMC,EAFDC,aAbE,WAAmC,IAAlCC,EAAiC,uDAAzBJ,EAAcK,EAAW,uCAChD,OAAQA,EAAOC,MACb,IAtBa,WAuBX,OAAO,2BAAKF,GAAZ,IAAmBH,MAAOG,EAAMH,MAAQ,IAC1C,IAvBe,aAwBb,OAAO,2BAAKG,GAAZ,IAAmBH,MAAOG,EAAMH,MAAQ,IAC1C,IAxBc,YAyBZ,OAAO,2BAAKG,GAAZ,IAAmBH,MAAOI,EAAOE,QACnC,QACE,OAAOH,M,kBCMEI,EAjCC,WACd,IAAMP,EAAQQ,aAAY,SAAAL,GAAK,OAAIA,EAAMH,SACnCS,EAAWC,cACjB,OACE,oCACE,oCAAUV,GACV,uBACEK,KAAK,UACLM,MAAM,QACNC,KAAK,OACLC,QAAS,kBAAMJ,EDNd,CAAEJ,KANM,eCQX,YAQA,uBACEA,KAAK,UACLM,MAAM,QACNC,KAAK,QACLC,QAAS,kBAAMJ,EDXd,CAAEJ,KARQ,iBCeb,cAQA,uBACEA,KAAK,SACLM,MAAM,QACNC,KAAK,UACLC,QAAS,kBAAMJ,EDhBd,CAAEJ,KAVO,YAUUC,MCgBa,MAJnC,iB,kBCsHSQ,UA1II,WAgGjB,OACE,kBAAC,IAAD,CAAUb,MAAOA,GACf,kBAAC,EAAD,MACA,yBAAKc,UAAU,QACb,kBAAC,IAAD,CACEC,SAAS,QACTC,iBAAe,EACfC,MAAOC,KAtGA,+BA2GX,yBAAKJ,UAAU,QACb,kBAAC,IAAD,CACEC,SAAS,QACTC,iBAAe,EACfC,MAAOC,KA9GA,8SAmHX,yBAAKJ,UAAU,QACb,kBAAC,IAAD,CACEC,SAAS,QACTC,iBAAe,EACfC,MAAOC,KAzGE,y6BA8Gb,yBAAKJ,UAAU,QACb,kBAAC,IAAD,CACEC,SAAS,QACTC,iBAAe,EACfC,MAAOC,KA1EA","file":"static/js/13.06c94f41.chunk.js","sourcesContent":["import { createStore } from 'redux';\n\n// action type\nconst COUNT_UP = 'COUNT_UP';\nconst COUNT_DOWN = 'COUNT_DOWN';\nconst SET_COUNT = 'SET_COUNT';\n\n// Action Creators\nexport function countUp() {\n  return { type: COUNT_UP };\n}\nexport function countDown() {\n  return { type: COUNT_DOWN };\n}\nexport function setCount(value) {\n  return { type: SET_COUNT, value };\n}\n\n// reducer\nconst defaultState = {\n  count: 0\n};\n\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case COUNT_UP:\n      return { ...state, count: state.count + 1 };\n    case COUNT_DOWN:\n      return { ...state, count: state.count - 1 };\n    case SET_COUNT:\n      return { ...state, count: action.value };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n\nexport default store;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { countDown, countUp, setCount } from './store';\nimport { Button } from 'antd';\n\nconst Counter = () => {\n  const count = useSelector(state => state.count);\n  const dispatch = useDispatch();\n  return (\n    <>\n      <p>count:{count}</p>\n      <Button\n        type=\"primary\"\n        shape=\"round\"\n        icon=\"plus\"\n        onClick={() => dispatch(countUp())}\n      >\n        Count Up\n      </Button>\n      <Button\n        type=\"primary\"\n        shape=\"round\"\n        icon=\"minus\"\n        onClick={() => dispatch(countDown())}\n      >\n        Count Down\n      </Button>\n      <Button\n        type=\"danger\"\n        shape=\"round\"\n        icon=\"warning\"\n        onClick={() => dispatch(setCount(0))}\n      >\n        Reset Count\n      </Button>\n    </>\n  );\n};\nexport default Counter;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport Counter from './counter.jsx';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { tomorrowNight } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nconst ReduxHooks = () => {\n  const shallCode = `yarn add redux react-redux`;\n  const indexCode = `// index.jsx\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport Counter from './counter.jsx';\n  \nconst ReduxHooks = () => {\n  return (\n    <Provider store={store}>\n      <Counter />\n    </Provider>\n  );\n};\nexport default ReduxHooks;`;\n  const counterCode = `// counter.jsx\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { countDown, countUp, setCount } from './store';\nimport { Button } from 'antd';\n  \nconst Counter = () => {\n  const count = useSelector(state => state.count);\n  const dispatch = useDispatch();\n  return (\n    <>\n      <p>count:{count}</p>\n      <Button\n        type=\"primary\"\n        shape=\"round\"\n        icon=\"plus\"\n        onClick={() => dispatch(countUp())}\n      >\n        Count Up\n      </Button>\n      <Button\n        type=\"primary\"\n        shape=\"round\"\n        icon=\"minus\"\n        onClick={() => dispatch(countDown())}\n      >\n        Count Down\n      </Button>\n      <Button\n        type=\"danger\"\n        shape=\"round\"\n        icon=\"warning\"\n        onClick={() => dispatch(setCount(0))}\n      >\n        Reset Count\n      </Button>\n    </>\n  );\n};\nexport default Counter;`;\n  const storeCode = `// store.js\nimport { createStore } from 'redux';\n\n// action type\nconst COUNT_UP = 'COUNT_UP';\nconst COUNT_DOWN = 'COUNT_DOWN';\nconst SET_COUNT = 'SET_COUNT';\n\n// Action Creators\nexport function countUp() {\n  return { type: COUNT_UP };\n}\nexport function countDown() {\n  return { type: COUNT_DOWN };\n}\nexport function setCount(value) {\n  return { type: SET_COUNT, value };\n}\n\n// reducer\nconst defaultState = {\n  count: 0\n};\n\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case COUNT_UP:\n      return { ...state, count: state.count + 1 };\n    case COUNT_DOWN:\n      return { ...state, count: state.count - 1 };\n    case SET_COUNT:\n      return { ...state, count: action.value };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n\nexport default store;`;\n  return (\n    <Provider store={store}>\n      <Counter />\n      <div className=\"code\">\n        <SyntaxHighlighter\n          language=\"shall\"\n          showLineNumbers\n          style={tomorrowNight}\n        >\n          {shallCode}\n        </SyntaxHighlighter>\n      </div>\n      <div className=\"code\">\n        <SyntaxHighlighter\n          language=\"react\"\n          showLineNumbers\n          style={tomorrowNight}\n        >\n          {indexCode}\n        </SyntaxHighlighter>\n      </div>\n      <div className=\"code\">\n        <SyntaxHighlighter\n          language=\"react\"\n          showLineNumbers\n          style={tomorrowNight}\n        >\n          {counterCode}\n        </SyntaxHighlighter>\n      </div>\n      <div className=\"code\">\n        <SyntaxHighlighter\n          language=\"react\"\n          showLineNumbers\n          style={tomorrowNight}\n        >\n          {storeCode}\n        </SyntaxHighlighter>\n      </div>\n    </Provider>\n  );\n};\nexport default ReduxHooks;\n"],"sourceRoot":""}