(window["webpackJsonpreact-hooks-demo"]=window["webpackJsonpreact-hooks-demo"]||[]).push([[14],{419:function(e,n,t){"use strict";t.r(n);var a=t(0),r=t.n(a),o=t(195),c=t(201);function l(e){return{type:"CHANGE_THEME",theme:e}}function m(e,n){switch(n.type){case"CHANGE_THEME":return Object(c.a)(Object(c.a)({},e),n.theme);default:return e}}var u=Object(a.createContext)({}),s=function(e){var n=e.children,t=Object(a.useReducer)(m,{name:"light",color:"#000000",background:"#eeeeee"}),c=Object(o.a)(t,2),l=c[0],s=c[1];return r.a.createElement(u.Provider,{value:{theme:l,dispatch:s}},n)},i=(t(400),t(410)),h=function(){var e=Object(a.useContext)(u).dispatch;return r.a.createElement(r.a.Fragment,null,r.a.createElement(i.a.Group,{onChange:function(n){switch(n.target.value){case"light":e(l({name:"light",color:"#000000",background:"#eeeeee"}));break;case"dark":e(l({name:"dark",color:"#ffffff",background:"#222222"}))}},defaultValue:"light"},r.a.createElement(i.a.Button,{value:"light"},"light"),r.a.createElement(i.a.Button,{value:"dark"},"dark")))},d=function(){var e=Object(a.useContext)(u).theme;return r.a.createElement("div",{className:"app",style:{color:e.color,backgroundColor:e.background}},r.a.createElement(h,null),r.a.createElement("div",null,"APP CONTENT!"))},p=t(418),g=t(413);n.default=function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement(s,null,r.a.createElement(d,null)),r.a.createElement("div",{className:"codes"},r.a.createElement("div",{className:"code"},r.a.createElement(p.a,{language:"react",showLineNumbers:!0,style:g.a},"// index.jsx\nimport React from \"react\";\nimport Theme  from './theme';\nimport App from './app';\n  \n  const UserReducer = () => {\n    return (\n        <Theme>\n          <App/>\n        </Theme>\n    );\n  };\n  \n  export default UserReducer;\n  ")),r.a.createElement("div",{className:"code"},r.a.createElement(p.a,{language:"react",showLineNumbers:!0,style:g.a},'//theme.jsx\nimport React, { createContext, useReducer } from "react";\nimport { themeReducer } from "./themeStore";\n  \n  // \u521b\u5efaContext \u5bf9\u8c61\n  export const ThemeContext = createContext({});\n  \n  const Theme = ({ children }) => {\n    const [theme, dispatch] = useReducer(themeReducer, {\n      name:\'light\',\n      color: "#000000",\n      background: "#eeeeee"\n    });\n    return (\n      <ThemeContext.Provider\n        value={{\n          theme,\n          dispatch\n        }}\n      >\n        {children}\n      </ThemeContext.Provider>\n    );\n  };\n  \n  export default Theme;\n  ')),r.a.createElement("div",{className:"code"},r.a.createElement(p.a,{language:"react",showLineNumbers:!0,style:g.a},"// themeStore.js\n// actionTypes\nconst CHANGE_THEME = 'CHANGE_THEME';\n  \n  // Action Creators\n  export function changeTheme(theme) {\n    return {\n      type: CHANGE_THEME,\n      theme\n    }\n  }\n  \n  // Reducers\n  export function themeReducer(state, action) {\n    switch (action.type) {\n      case CHANGE_THEME:\n        return {\n          ...state,\n          ...action.theme\n        }\n  \n      default:\n        return state;\n    }\n  }")),r.a.createElement("div",{className:"code"},r.a.createElement(p.a,{language:"react",showLineNumbers:!0,style:g.a},'// app.jsx\nimport React, { useContext } from "react";\nimport { ThemeContext } from "./theme";\nimport Toolbar  from \'./toolbar\'\n  \n  const App = () => {\n    const { theme } = useContext(ThemeContext);\n    return (\n      <div\n        className="app"\n        style={{ color: theme.color, backgroundColor: theme.background }}\n      >\n        <Toolbar />\n       <div>\n         APP CONTENT!\n       </div>\n      </div>\n    );\n  };\n  export default App;\n  ')),r.a.createElement("div",{className:"code"},r.a.createElement(p.a,{language:"react",showLineNumbers:!0,style:g.a},'// toolbar.jsx\nimport React, { useContext } from "react";\nimport { ThemeContext } from "./theme";\nimport { Radio } from "antd";\nimport { changeTheme } from "./themeStore";\n  \n  const ToolBar = () => {\n    const { dispatch } = useContext(ThemeContext);\n    const onChange = e => {\n      const radioValue = e.target.value;\n      const lightTheme = {\n        name: "light",\n        color: "#000000",\n        background: "#eeeeee"\n      };\n      const darkTheme = {\n        name: "dark",\n        color: "#ffffff",\n        background: "#222222"\n      };\n      switch (radioValue) {\n        case "light":\n          dispatch(changeTheme(lightTheme));\n          break;\n        case "dark":\n          dispatch(changeTheme(darkTheme));\n          break;\n        default:\n          break;\n      }\n    };\n    return (\n      <>\n        <Radio.Group onChange={onChange} defaultValue="light">\n          <Radio.Button value="light">light</Radio.Button>\n          <Radio.Button value="dark">dark</Radio.Button>\n        </Radio.Group>\n      </>\n    );\n  };\n  export default ToolBar;\n  \n  '))))}}}]);
//# sourceMappingURL=14.24f34695.chunk.js.map