{"version":3,"sources":["pages/use-reducer/themeStore.js","pages/use-reducer/theme.jsx","pages/use-reducer/toolbar.jsx","pages/use-reducer/app.jsx","pages/use-reducer/index.jsx"],"names":["changeTheme","theme","type","themeReducer","state","action","ThemeContext","createContext","Theme","children","useReducer","name","color","background","dispatch","Provider","value","ToolBar","useContext","Group","onChange","e","target","defaultValue","Button","App","className","style","backgroundColor","UserReducer","language","showLineNumbers","tomorrowNight"],"mappings":"8KAIO,SAASA,EAAYC,GAC1B,MAAO,CACLC,KALiB,eAMjBD,SAKG,SAASE,EAAaC,EAAOC,GAClC,OAAQA,EAAOH,MACb,IAbiB,eAcf,OAAO,2BACFE,GACAC,EAAOJ,OAGd,QACE,OAAOG,GCjBN,IAAME,EAAeC,wBAAc,IAoB3BC,EAlBD,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACJC,qBAAWP,EAAc,CACjDQ,KAAK,QACLC,MAAO,UACPC,WAAY,YAJgB,mBACvBZ,EADuB,KAChBa,EADgB,KAM9B,OACE,kBAACR,EAAaS,SAAd,CACEC,MAAO,CACLf,QACAa,aAGDL,I,kBCoBQQ,EAlCC,WAAO,IACbH,EAAaI,qBAAWZ,GAAxBQ,SAwBR,OACE,oCACE,sBAAOK,MAAP,CAAaC,SAzBA,SAAAC,GAYf,OAXmBA,EAAEC,OAAON,OAY1B,IAAK,QACHF,EAASd,EAZM,CACjBW,KAAM,QACNC,MAAO,UACPC,WAAY,aAUV,MACF,IAAK,OACHC,EAASd,EAVK,CAChBW,KAAM,OACNC,MAAO,UACPC,WAAY,eAeqBU,aAAa,SAC5C,sBAAOC,OAAP,CAAcR,MAAM,SAApB,SACA,sBAAOQ,OAAP,CAAcR,MAAM,QAApB,WChBOS,EAdH,WAAO,IACTxB,EAAUiB,qBAAWZ,GAArBL,MACR,OACE,yBACEyB,UAAU,MACVC,MAAO,CAAEf,MAAOX,EAAMW,MAAOgB,gBAAiB3B,EAAMY,aAEpD,kBAAC,EAAD,MACD,+C,kBCuLUgB,UA7LK,WAqIlB,OACE,oCACE,kBAAC,EAAD,KACE,kBAAC,EAAD,OAEF,yBAAKH,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,IAAD,CACEI,SAAS,QACTC,iBAAe,EACfJ,MAAOK,KA9IF,mQAmJT,yBAAKN,UAAU,QACb,kBAAC,IAAD,CACEI,SAAS,QACTC,iBAAe,EACfJ,MAAOK,KAxIF,2mBA6IT,yBAAKN,UAAU,QACb,kBAAC,IAAD,CACEI,SAAS,QACTC,iBAAe,EACfJ,MAAOK,KAtHF,6cA2HT,yBAAKN,UAAU,QACb,kBAAC,IAAD,CACEI,SAAS,QACTC,iBAAe,EACfJ,MAAOK,KArGJ,2dA0GP,yBAAKN,UAAU,QACb,kBAAC,IAAD,CACEI,SAAS,QACTC,iBAAe,EACfJ,MAAOK,KAzFA","file":"static/js/14.24f34695.chunk.js","sourcesContent":["// actionTypes\nconst CHANGE_THEME = 'CHANGE_THEME';\n\n// Action Creators\nexport function changeTheme(theme) {\n  return {\n    type: CHANGE_THEME,\n    theme\n  }\n}\n\n// Reducers\nexport function themeReducer(state, action) {\n  switch (action.type) {\n    case CHANGE_THEME:\n      return {\n        ...state,\n        ...action.theme\n      }\n\n    default:\n      return state;\n  }\n}","import React, { createContext, useReducer } from \"react\";\nimport { themeReducer } from \"./themeStore\";\n\n// 创建Context 对象\nexport const ThemeContext = createContext({});\n\nconst Theme = ({ children }) => {\n  const [theme, dispatch] = useReducer(themeReducer, {\n    name:'light',\n    color: \"#000000\",\n    background: \"#eeeeee\"\n  });\n  return (\n    <ThemeContext.Provider\n      value={{\n        theme,\n        dispatch\n      }}\n    >\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport default Theme;\n","import React, { useContext } from \"react\";\nimport { ThemeContext } from \"./theme\";\nimport { Radio } from \"antd\";\nimport { changeTheme } from \"./themeStore\";\n\nconst ToolBar = () => {\n  const { dispatch } = useContext(ThemeContext);\n  const onChange = e => {\n    const radioValue = e.target.value;\n    const lightTheme = {\n      name: \"light\",\n      color: \"#000000\",\n      background: \"#eeeeee\"\n    };\n    const darkTheme = {\n      name: \"dark\",\n      color: \"#ffffff\",\n      background: \"#222222\"\n    };\n    switch (radioValue) {\n      case \"light\":\n        dispatch(changeTheme(lightTheme));\n        break;\n      case \"dark\":\n        dispatch(changeTheme(darkTheme));\n        break;\n      default:\n        break;\n    }\n  };\n  return (\n    <>\n      <Radio.Group onChange={onChange} defaultValue=\"light\">\n        <Radio.Button value=\"light\">light</Radio.Button>\n        <Radio.Button value=\"dark\">dark</Radio.Button>\n      </Radio.Group>\n    </>\n  );\n};\nexport default ToolBar;\n","import React, { useContext } from \"react\";\nimport { ThemeContext } from \"./theme\";\nimport Toolbar  from './toolbar'\n\nconst App = () => {\n  const { theme } = useContext(ThemeContext);\n  return (\n    <div\n      className=\"app\"\n      style={{ color: theme.color, backgroundColor: theme.background }}\n    >\n      <Toolbar />\n     <div>\n       APP CONTENT!\n     </div>\n    </div>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport Theme from \"./theme\";\nimport App from \"./app\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { tomorrowNight } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\n\nconst UserReducer = () => {\n  const indexCode = `// index.jsx\nimport React from \"react\";\nimport Theme  from './theme';\nimport App from './app';\n  \n  const UserReducer = () => {\n    return (\n        <Theme>\n          <App/>\n        </Theme>\n    );\n  };\n  \n  export default UserReducer;\n  `;\n  const themeCode = `//theme.jsx\nimport React, { createContext, useReducer } from \"react\";\nimport { themeReducer } from \"./themeStore\";\n  \n  // 创建Context 对象\n  export const ThemeContext = createContext({});\n  \n  const Theme = ({ children }) => {\n    const [theme, dispatch] = useReducer(themeReducer, {\n      name:'light',\n      color: \"#000000\",\n      background: \"#eeeeee\"\n    });\n    return (\n      <ThemeContext.Provider\n        value={{\n          theme,\n          dispatch\n        }}\n      >\n        {children}\n      </ThemeContext.Provider>\n    );\n  };\n  \n  export default Theme;\n  `;\n  const storeCode = `// themeStore.js\n// actionTypes\nconst CHANGE_THEME = 'CHANGE_THEME';\n  \n  // Action Creators\n  export function changeTheme(theme) {\n    return {\n      type: CHANGE_THEME,\n      theme\n    }\n  }\n  \n  // Reducers\n  export function themeReducer(state, action) {\n    switch (action.type) {\n      case CHANGE_THEME:\n        return {\n          ...state,\n          ...action.theme\n        }\n  \n      default:\n        return state;\n    }\n  }`;\n\n  const appCode = `// app.jsx\nimport React, { useContext } from \"react\";\nimport { ThemeContext } from \"./theme\";\nimport Toolbar  from './toolbar'\n  \n  const App = () => {\n    const { theme } = useContext(ThemeContext);\n    return (\n      <div\n        className=\"app\"\n        style={{ color: theme.color, backgroundColor: theme.background }}\n      >\n        <Toolbar />\n       <div>\n         APP CONTENT!\n       </div>\n      </div>\n    );\n  };\n  export default App;\n  `;\n  const toolbarCode = `// toolbar.jsx\nimport React, { useContext } from \"react\";\nimport { ThemeContext } from \"./theme\";\nimport { Radio } from \"antd\";\nimport { changeTheme } from \"./themeStore\";\n  \n  const ToolBar = () => {\n    const { dispatch } = useContext(ThemeContext);\n    const onChange = e => {\n      const radioValue = e.target.value;\n      const lightTheme = {\n        name: \"light\",\n        color: \"#000000\",\n        background: \"#eeeeee\"\n      };\n      const darkTheme = {\n        name: \"dark\",\n        color: \"#ffffff\",\n        background: \"#222222\"\n      };\n      switch (radioValue) {\n        case \"light\":\n          dispatch(changeTheme(lightTheme));\n          break;\n        case \"dark\":\n          dispatch(changeTheme(darkTheme));\n          break;\n        default:\n          break;\n      }\n    };\n    return (\n      <>\n        <Radio.Group onChange={onChange} defaultValue=\"light\">\n          <Radio.Button value=\"light\">light</Radio.Button>\n          <Radio.Button value=\"dark\">dark</Radio.Button>\n        </Radio.Group>\n      </>\n    );\n  };\n  export default ToolBar;\n  \n  `;\n  return (\n    <>\n      <Theme>\n        <App />\n      </Theme>\n      <div className=\"codes\">\n        <div className=\"code\">\n          <SyntaxHighlighter\n            language=\"react\"\n            showLineNumbers\n            style={tomorrowNight}\n          >\n            {indexCode}\n          </SyntaxHighlighter>\n        </div>\n        <div className=\"code\">\n          <SyntaxHighlighter\n            language=\"react\"\n            showLineNumbers\n            style={tomorrowNight}\n          >\n            {themeCode}\n          </SyntaxHighlighter>\n        </div>\n        <div className=\"code\">\n          <SyntaxHighlighter\n            language=\"react\"\n            showLineNumbers\n            style={tomorrowNight}\n          >\n            {storeCode}\n          </SyntaxHighlighter>\n        </div>\n        <div className=\"code\">\n          <SyntaxHighlighter\n            language=\"react\"\n            showLineNumbers\n            style={tomorrowNight}\n          >\n            {appCode}\n          </SyntaxHighlighter>\n        </div>\n        <div className=\"code\">\n          <SyntaxHighlighter\n            language=\"react\"\n            showLineNumbers\n            style={tomorrowNight}\n          >\n            {toolbarCode}\n          </SyntaxHighlighter>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default UserReducer;\n"],"sourceRoot":""}